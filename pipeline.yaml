AWSTemplateFormatVersion: 2010-09-09
Description: CodePipeline uses CodeBuild and GitHub

Parameters:

  GitHubOwner:
    Type: String
    Description: Name of the GitHub repository owner, for example, your company's GitHub name. This is not the repo name.

  GitHubRepoName:
    Type: String
    Description: Name of the GitHub Repo that this pipeline should interact with

  GitHubBranchName:
    Type: String
    Description: Name of the GitHub branch that should trigger the pipeline

  GitHubConnectionArn:
    Type: String
    Description: ARN for the GitHub Connection v2 set up in the account in CodePipeline

  PipelineArtifactsBucketName:
    Type: String
    Description: Create a name for a bucket that will store the pipeline artifacts (this bucket is created with this template)
    Default: demo-pipeline-artifacts

  Environment:
    Type: String

  PipelineName:
    Type: String
    Description: >
      Create a descriptive and friendly name for the pipeline. Do not include the environment (such as dev),
      as this will be added to the name automatically.


Resources:

  #------- CodeBuild -------
  AmplifyCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Description: Interacts with Amplify
      EncryptionKey: !GetAtt CMKKeyForPipeline.Arn
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL

        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0

      LogsConfig:
        CloudWatchLogs:
          Status: "ENABLED"
      Name: !Sub AmplifyBuildProject-${Environment}
      ServiceRole: !GetAtt AmplifyPipelineCodeBuildRole.Arn
      TimeoutInMinutes: 10
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                nodejs: latest
              commands:
                - jq --version
                - yum update -y
                - npm install -g @aws-amplify/cli
            build:
              commands:
                - echo "in build stage!"
                # - amplify pull --appId db7khzj01e1xf --envName staging
                # - amplify status

                # - AMPLIFY_CREDENTIALS=$(aws sts assume-role --role-arn $ROLE --role-session-name codebuild-session)
                # - export AWS_ACCESS_KEY_ID=$(echo $AMPLIFY_CREDENTIALS | jq .Credentials.AccessKeyId | xargs)
                # - export AWS_SECRET_ACCESS_KEY=$(echo $AMPLIFY_CREDENTIALS | jq .Credentials.SecretAccessKey | xargs)
                # - export AWS_SESSION_TOKEN=$(echo $AMPLIFY_CREDENTIALS | jq .Credentials.SessionToken | xargs)

                # navigate to amplify project folder, "amplify status" will display list of resources in project folder.


  #------- CodePipeline -------
  DemoPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        EncryptionKey:
          Id: !GetAtt CMKKeyForPipeline.Arn
          Type: KMS
        Location: !Ref CodePipelineS3Bucket
      RoleArn: !GetAtt AmplifyPipelineRole.Arn
      Name: !Sub ${PipelineName}-${Environment}
      Stages:
        - Name: GitHubSource
          Actions:
            - Name: SourceCodeStar
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: CodeStarSourceConnection
              Configuration:
                ConnectionArn: !Ref GitHubConnectionArn
                FullRepositoryId: !Sub "${GitHubOwner}/${GitHubRepoName}"
                BranchName: !Ref GitHubBranchName
              OutputArtifacts:
                - Name: SourceOutput
              RunOrder: 1

        - Name: Amplify
          Actions:
            - Name: UseAmplify
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref AmplifyCodeBuildProject
              RunOrder: 1
              InputArtifacts:
                - Name: SourceOutput

  #------- LogGroup -------
  AmplifyCodePipelineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub AmplifyCodePipelineLogGroup-${Environment}
      RetentionInDays: 30

  #------- Encryption -------
  CMKKeyForPipeline:
    Type: AWS::KMS::Key
    Properties:
      Description: "CMK to encrypt Pipeline"
      KeyPolicy:
        Version: "2012-10-17"
        Id: "key-default-1"
        Statement:
          - Sid: "Enable IAM User Permissions"
            Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*" # refers to this CMK
          - Sid: "Allow use of the key"
            Effect: "Allow"
            Principal: "*"
            Action:
              - "kms:DescribeKey"
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey"
              - "kms:GenerateDataKeyWithoutPlaintext"
              - "kms:CreateGrant"
            Resource: "*"

  CMKAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/DemoPipelineCMK/${Environment}
      TargetKeyId:
        Ref: CMKKeyForPipeline

  #------- Encrypted Bucket for Pipeline Artifacts-------
  CodePipelineS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${PipelineArtifactsBucketName}-${Environment}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Ref CMKKeyForPipeline

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CodePipelineS3Bucket
      PolicyDocument:
        Statement:
          - Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: "*"
            Action:
              - s3:PutObject
            Resource:
              - !Sub arn:aws:s3:::${PipelineArtifactsBucketName}-${Environment}/*
            Condition:
              StringNotEquals:
                s3:x-amz-server-side-encryption: aws:kms
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !Sub arn:aws:s3:::${PipelineArtifactsBucketName}-${Environment}/*
            Condition:
              Bool:
                aws:SecureTransport: false

  #------- IAM Permissions for CodeBuild -------
  AmplifyPipelineCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess-Amplify
      Path: /

  AmplifyPipelineCodeBuildPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub DemoCodeBuildPipelinePolicy-${Environment}
      Roles:
        - !Ref AmplifyPipelineCodeBuildRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: CloudWatchLogsPolicy
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "*"
          - Sid: S3Policy
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:PutObject
              - s3:GetBucketAcl
              - s3:GetBucketLocation
            Resource: "*"
          - Sid: RolePermissions
            Effect: Allow
            Action:
              - iam:PassRole
              - iam:ListInstanceProfiles
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - kms:Encrypt,
              - kms:Decrypt,
              - kms:ReEncrypt*,
              - kms:GenerateDataKey*,
              - kms:DescribeKey,
              - kms:CreateGrant
            Resource: "*"

  AmplifyPipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodePipelineFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess
      Path: /

  AmplifyipelinePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub AmplifyPipelinePolicy-${AWS::Region}
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - iam:ListRoles
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
            Resource:
              - "*"
      Roles:
        - !Ref AmplifyPipelineRole


